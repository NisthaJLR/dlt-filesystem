// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logger_proto.proto

#ifndef PROTOBUF_INCLUDED_logger_5fproto_2eproto
#define PROTOBUF_INCLUDED_logger_5fproto_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_logger_5fproto_2eproto 

namespace protobuf_logger_5fproto_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_logger_5fproto_2eproto
class Log;
class LogDefaultTypeInternal;
extern LogDefaultTypeInternal _Log_default_instance_;
class Time;
class TimeDefaultTypeInternal;
extern TimeDefaultTypeInternal _Time_default_instance_;
class Timestamp;
class TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
namespace google {
namespace protobuf {
template<> ::Log* Arena::CreateMaybeMessage<::Log>(Arena*);
template<> ::Time* Arena::CreateMaybeMessage<::Time>(Arena*);
template<> ::Timestamp* Arena::CreateMaybeMessage<::Timestamp>(Arena*);
}  // namespace protobuf
}  // namespace google

enum Log_EcuId {
  Log_EcuId_ORIN = 0,
  Log_EcuId_AURIX = 1,
  Log_EcuId_FSI = 2,
  Log_EcuId_Log_EcuId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Log_EcuId_Log_EcuId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Log_EcuId_IsValid(int value);
const Log_EcuId Log_EcuId_EcuId_MIN = Log_EcuId_ORIN;
const Log_EcuId Log_EcuId_EcuId_MAX = Log_EcuId_FSI;
const int Log_EcuId_EcuId_ARRAYSIZE = Log_EcuId_EcuId_MAX + 1;

const ::google::protobuf::EnumDescriptor* Log_EcuId_descriptor();
inline const ::std::string& Log_EcuId_Name(Log_EcuId value) {
  return ::google::protobuf::internal::NameOfEnum(
    Log_EcuId_descriptor(), value);
}
inline bool Log_EcuId_Parse(
    const ::std::string& name, Log_EcuId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Log_EcuId>(
    Log_EcuId_descriptor(), name, value);
}
enum Log_ApId {
  Log_ApId_VIOS = 0,
  Log_ApId_SYSL = 1,
  Log_ApId_VUig = 2,
  Log_ApId_VDIS = 3,
  Log_ApId_VSVS = 4,
  Log_ApId_Log_ApId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Log_ApId_Log_ApId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Log_ApId_IsValid(int value);
const Log_ApId Log_ApId_ApId_MIN = Log_ApId_VIOS;
const Log_ApId Log_ApId_ApId_MAX = Log_ApId_VSVS;
const int Log_ApId_ApId_ARRAYSIZE = Log_ApId_ApId_MAX + 1;

const ::google::protobuf::EnumDescriptor* Log_ApId_descriptor();
inline const ::std::string& Log_ApId_Name(Log_ApId value) {
  return ::google::protobuf::internal::NameOfEnum(
    Log_ApId_descriptor(), value);
}
inline bool Log_ApId_Parse(
    const ::std::string& name, Log_ApId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Log_ApId>(
    Log_ApId_descriptor(), name, value);
}
enum Log_CtId {
  Log_CtId_core = 0,
  Log_CtId_sysl = 1,
  Log_CtId_vuig = 2,
  Log_CtId_Log_CtId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Log_CtId_Log_CtId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Log_CtId_IsValid(int value);
const Log_CtId Log_CtId_CtId_MIN = Log_CtId_core;
const Log_CtId Log_CtId_CtId_MAX = Log_CtId_vuig;
const int Log_CtId_CtId_ARRAYSIZE = Log_CtId_CtId_MAX + 1;

const ::google::protobuf::EnumDescriptor* Log_CtId_descriptor();
inline const ::std::string& Log_CtId_Name(Log_CtId value) {
  return ::google::protobuf::internal::NameOfEnum(
    Log_CtId_descriptor(), value);
}
inline bool Log_CtId_Parse(
    const ::std::string& name, Log_CtId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Log_CtId>(
    Log_CtId_descriptor(), name, value);
}
enum Log_Type {
  Log_Type_default_ = 0,
  Log_Type_off = 1,
  Log_Type_error = 2,
  Log_Type_warn = 3,
  Log_Type_info = 4,
  Log_Type_debug = 5,
  Log_Type_verbose = 6,
  Log_Type_Log_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Log_Type_Log_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Log_Type_IsValid(int value);
const Log_Type Log_Type_Type_MIN = Log_Type_default_;
const Log_Type Log_Type_Type_MAX = Log_Type_verbose;
const int Log_Type_Type_ARRAYSIZE = Log_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Log_Type_descriptor();
inline const ::std::string& Log_Type_Name(Log_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Log_Type_descriptor(), value);
}
inline bool Log_Type_Parse(
    const ::std::string& name, Log_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Log_Type>(
    Log_Type_descriptor(), name, value);
}
// ===================================================================

class Time : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Time) */ {
 public:
  Time();
  virtual ~Time();

  Time(const Time& from);

  inline Time& operator=(const Time& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Time(Time&& from) noexcept
    : Time() {
    *this = ::std::move(from);
  }

  inline Time& operator=(Time&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Time& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Time* internal_default_instance() {
    return reinterpret_cast<const Time*>(
               &_Time_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Time* other);
  friend void swap(Time& a, Time& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Time* New() const final {
    return CreateMaybeMessage<Time>(NULL);
  }

  Time* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Time>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Time& from);
  void MergeFrom(const Time& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Time* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 year = 1;
  void clear_year();
  static const int kYearFieldNumber = 1;
  ::google::protobuf::int32 year() const;
  void set_year(::google::protobuf::int32 value);

  // int32 month = 2;
  void clear_month();
  static const int kMonthFieldNumber = 2;
  ::google::protobuf::int32 month() const;
  void set_month(::google::protobuf::int32 value);

  // int32 day = 3;
  void clear_day();
  static const int kDayFieldNumber = 3;
  ::google::protobuf::int32 day() const;
  void set_day(::google::protobuf::int32 value);

  // int32 hours = 4;
  void clear_hours();
  static const int kHoursFieldNumber = 4;
  ::google::protobuf::int32 hours() const;
  void set_hours(::google::protobuf::int32 value);

  // int32 minutes = 5;
  void clear_minutes();
  static const int kMinutesFieldNumber = 5;
  ::google::protobuf::int32 minutes() const;
  void set_minutes(::google::protobuf::int32 value);

  // int32 seconds = 6;
  void clear_seconds();
  static const int kSecondsFieldNumber = 6;
  ::google::protobuf::int32 seconds() const;
  void set_seconds(::google::protobuf::int32 value);

  // int32 nanos = 7;
  void clear_nanos();
  static const int kNanosFieldNumber = 7;
  ::google::protobuf::int32 nanos() const;
  void set_nanos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Time)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 year_;
  ::google::protobuf::int32 month_;
  ::google::protobuf::int32 day_;
  ::google::protobuf::int32 hours_;
  ::google::protobuf::int32 minutes_;
  ::google::protobuf::int32 seconds_;
  ::google::protobuf::int32 nanos_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_logger_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Timestamp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Timestamp) */ {
 public:
  Timestamp();
  virtual ~Timestamp();

  Timestamp(const Timestamp& from);

  inline Timestamp& operator=(const Timestamp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Timestamp(Timestamp&& from) noexcept
    : Timestamp() {
    *this = ::std::move(from);
  }

  inline Timestamp& operator=(Timestamp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Timestamp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Timestamp* internal_default_instance() {
    return reinterpret_cast<const Timestamp*>(
               &_Timestamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Timestamp* other);
  friend void swap(Timestamp& a, Timestamp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Timestamp* New() const final {
    return CreateMaybeMessage<Timestamp>(NULL);
  }

  Timestamp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Timestamp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Timestamp& from);
  void MergeFrom(const Timestamp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Timestamp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // int32 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::int32 timestamp() const;
  void set_timestamp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Timestamp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_logger_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Log : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Log) */ {
 public:
  Log();
  virtual ~Log();

  Log(const Log& from);

  inline Log& operator=(const Log& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Log(Log&& from) noexcept
    : Log() {
    *this = ::std::move(from);
  }

  inline Log& operator=(Log&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Log& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Log* internal_default_instance() {
    return reinterpret_cast<const Log*>(
               &_Log_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Log* other);
  friend void swap(Log& a, Log& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Log* New() const final {
    return CreateMaybeMessage<Log>(NULL);
  }

  Log* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Log>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Log& from);
  void MergeFrom(const Log& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Log* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Log_EcuId EcuId;
  static const EcuId ORIN =
    Log_EcuId_ORIN;
  static const EcuId AURIX =
    Log_EcuId_AURIX;
  static const EcuId FSI =
    Log_EcuId_FSI;
  static inline bool EcuId_IsValid(int value) {
    return Log_EcuId_IsValid(value);
  }
  static const EcuId EcuId_MIN =
    Log_EcuId_EcuId_MIN;
  static const EcuId EcuId_MAX =
    Log_EcuId_EcuId_MAX;
  static const int EcuId_ARRAYSIZE =
    Log_EcuId_EcuId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EcuId_descriptor() {
    return Log_EcuId_descriptor();
  }
  static inline const ::std::string& EcuId_Name(EcuId value) {
    return Log_EcuId_Name(value);
  }
  static inline bool EcuId_Parse(const ::std::string& name,
      EcuId* value) {
    return Log_EcuId_Parse(name, value);
  }

  typedef Log_ApId ApId;
  static const ApId VIOS =
    Log_ApId_VIOS;
  static const ApId SYSL =
    Log_ApId_SYSL;
  static const ApId VUig =
    Log_ApId_VUig;
  static const ApId VDIS =
    Log_ApId_VDIS;
  static const ApId VSVS =
    Log_ApId_VSVS;
  static inline bool ApId_IsValid(int value) {
    return Log_ApId_IsValid(value);
  }
  static const ApId ApId_MIN =
    Log_ApId_ApId_MIN;
  static const ApId ApId_MAX =
    Log_ApId_ApId_MAX;
  static const int ApId_ARRAYSIZE =
    Log_ApId_ApId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ApId_descriptor() {
    return Log_ApId_descriptor();
  }
  static inline const ::std::string& ApId_Name(ApId value) {
    return Log_ApId_Name(value);
  }
  static inline bool ApId_Parse(const ::std::string& name,
      ApId* value) {
    return Log_ApId_Parse(name, value);
  }

  typedef Log_CtId CtId;
  static const CtId core =
    Log_CtId_core;
  static const CtId sysl =
    Log_CtId_sysl;
  static const CtId vuig =
    Log_CtId_vuig;
  static inline bool CtId_IsValid(int value) {
    return Log_CtId_IsValid(value);
  }
  static const CtId CtId_MIN =
    Log_CtId_CtId_MIN;
  static const CtId CtId_MAX =
    Log_CtId_CtId_MAX;
  static const int CtId_ARRAYSIZE =
    Log_CtId_CtId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CtId_descriptor() {
    return Log_CtId_descriptor();
  }
  static inline const ::std::string& CtId_Name(CtId value) {
    return Log_CtId_Name(value);
  }
  static inline bool CtId_Parse(const ::std::string& name,
      CtId* value) {
    return Log_CtId_Parse(name, value);
  }

  typedef Log_Type Type;
  static const Type default_ =
    Log_Type_default_;
  static const Type off =
    Log_Type_off;
  static const Type error =
    Log_Type_error;
  static const Type warn =
    Log_Type_warn;
  static const Type info =
    Log_Type_info;
  static const Type debug =
    Log_Type_debug;
  static const Type verbose =
    Log_Type_verbose;
  static inline bool Type_IsValid(int value) {
    return Log_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Log_Type_Type_MIN;
  static const Type Type_MAX =
    Log_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Log_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Log_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Log_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Log_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string payload = 8;
  void clear_payload();
  static const int kPayloadFieldNumber = 8;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  #if LANG_CXX11
  void set_payload(::std::string&& value);
  #endif
  void set_payload(const char* value);
  void set_payload(const char* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);

  // .Time time = 2;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  private:
  const ::Time& _internal_time() const;
  public:
  const ::Time& time() const;
  ::Time* release_time();
  ::Time* mutable_time();
  void set_allocated_time(::Time* time);

  // .Timestamp timestamp = 3;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  private:
  const ::Timestamp& _internal_timestamp() const;
  public:
  const ::Timestamp& timestamp() const;
  ::Timestamp* release_timestamp();
  ::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::Timestamp* timestamp);

  // int64 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int64 index() const;
  void set_index(::google::protobuf::int64 value);

  // .Log.EcuId ecuid = 4;
  void clear_ecuid();
  static const int kEcuidFieldNumber = 4;
  ::Log_EcuId ecuid() const;
  void set_ecuid(::Log_EcuId value);

  // .Log.ApId apid = 5;
  void clear_apid();
  static const int kApidFieldNumber = 5;
  ::Log_ApId apid() const;
  void set_apid(::Log_ApId value);

  // .Log.CtId ctid = 6;
  void clear_ctid();
  static const int kCtidFieldNumber = 6;
  ::Log_CtId ctid() const;
  void set_ctid(::Log_CtId value);

  // .Log.Type type = 7;
  void clear_type();
  static const int kTypeFieldNumber = 7;
  ::Log_Type type() const;
  void set_type(::Log_Type value);

  // @@protoc_insertion_point(class_scope:Log)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  ::Time* time_;
  ::Timestamp* timestamp_;
  ::google::protobuf::int64 index_;
  int ecuid_;
  int apid_;
  int ctid_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_logger_5fproto_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Time

// int32 year = 1;
inline void Time::clear_year() {
  year_ = 0;
}
inline ::google::protobuf::int32 Time::year() const {
  // @@protoc_insertion_point(field_get:Time.year)
  return year_;
}
inline void Time::set_year(::google::protobuf::int32 value) {
  
  year_ = value;
  // @@protoc_insertion_point(field_set:Time.year)
}

// int32 month = 2;
inline void Time::clear_month() {
  month_ = 0;
}
inline ::google::protobuf::int32 Time::month() const {
  // @@protoc_insertion_point(field_get:Time.month)
  return month_;
}
inline void Time::set_month(::google::protobuf::int32 value) {
  
  month_ = value;
  // @@protoc_insertion_point(field_set:Time.month)
}

// int32 day = 3;
inline void Time::clear_day() {
  day_ = 0;
}
inline ::google::protobuf::int32 Time::day() const {
  // @@protoc_insertion_point(field_get:Time.day)
  return day_;
}
inline void Time::set_day(::google::protobuf::int32 value) {
  
  day_ = value;
  // @@protoc_insertion_point(field_set:Time.day)
}

// int32 hours = 4;
inline void Time::clear_hours() {
  hours_ = 0;
}
inline ::google::protobuf::int32 Time::hours() const {
  // @@protoc_insertion_point(field_get:Time.hours)
  return hours_;
}
inline void Time::set_hours(::google::protobuf::int32 value) {
  
  hours_ = value;
  // @@protoc_insertion_point(field_set:Time.hours)
}

// int32 minutes = 5;
inline void Time::clear_minutes() {
  minutes_ = 0;
}
inline ::google::protobuf::int32 Time::minutes() const {
  // @@protoc_insertion_point(field_get:Time.minutes)
  return minutes_;
}
inline void Time::set_minutes(::google::protobuf::int32 value) {
  
  minutes_ = value;
  // @@protoc_insertion_point(field_set:Time.minutes)
}

// int32 seconds = 6;
inline void Time::clear_seconds() {
  seconds_ = 0;
}
inline ::google::protobuf::int32 Time::seconds() const {
  // @@protoc_insertion_point(field_get:Time.seconds)
  return seconds_;
}
inline void Time::set_seconds(::google::protobuf::int32 value) {
  
  seconds_ = value;
  // @@protoc_insertion_point(field_set:Time.seconds)
}

// int32 nanos = 7;
inline void Time::clear_nanos() {
  nanos_ = 0;
}
inline ::google::protobuf::int32 Time::nanos() const {
  // @@protoc_insertion_point(field_get:Time.nanos)
  return nanos_;
}
inline void Time::set_nanos(::google::protobuf::int32 value) {
  
  nanos_ = value;
  // @@protoc_insertion_point(field_set:Time.nanos)
}

// -------------------------------------------------------------------

// Timestamp

// int32 index = 1;
inline void Timestamp::clear_index() {
  index_ = 0;
}
inline ::google::protobuf::int32 Timestamp::index() const {
  // @@protoc_insertion_point(field_get:Timestamp.index)
  return index_;
}
inline void Timestamp::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:Timestamp.index)
}

// int32 timestamp = 2;
inline void Timestamp::clear_timestamp() {
  timestamp_ = 0;
}
inline ::google::protobuf::int32 Timestamp::timestamp() const {
  // @@protoc_insertion_point(field_get:Timestamp.timestamp)
  return timestamp_;
}
inline void Timestamp::set_timestamp(::google::protobuf::int32 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:Timestamp.timestamp)
}

// -------------------------------------------------------------------

// Log

// int64 index = 1;
inline void Log::clear_index() {
  index_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Log::index() const {
  // @@protoc_insertion_point(field_get:Log.index)
  return index_;
}
inline void Log::set_index(::google::protobuf::int64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:Log.index)
}

// .Time time = 2;
inline bool Log::has_time() const {
  return this != internal_default_instance() && time_ != NULL;
}
inline void Log::clear_time() {
  if (GetArenaNoVirtual() == NULL && time_ != NULL) {
    delete time_;
  }
  time_ = NULL;
}
inline const ::Time& Log::_internal_time() const {
  return *time_;
}
inline const ::Time& Log::time() const {
  const ::Time* p = time_;
  // @@protoc_insertion_point(field_get:Log.time)
  return p != NULL ? *p : *reinterpret_cast<const ::Time*>(
      &::_Time_default_instance_);
}
inline ::Time* Log::release_time() {
  // @@protoc_insertion_point(field_release:Log.time)
  
  ::Time* temp = time_;
  time_ = NULL;
  return temp;
}
inline ::Time* Log::mutable_time() {
  
  if (time_ == NULL) {
    auto* p = CreateMaybeMessage<::Time>(GetArenaNoVirtual());
    time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Log.time)
  return time_;
}
inline void Log::set_allocated_time(::Time* time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete time_;
  }
  if (time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:Log.time)
}

// .Timestamp timestamp = 3;
inline bool Log::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
inline void Log::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
}
inline const ::Timestamp& Log::_internal_timestamp() const {
  return *timestamp_;
}
inline const ::Timestamp& Log::timestamp() const {
  const ::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:Log.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::Timestamp*>(
      &::_Timestamp_default_instance_);
}
inline ::Timestamp* Log::release_timestamp() {
  // @@protoc_insertion_point(field_release:Log.timestamp)
  
  ::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline ::Timestamp* Log::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Log.timestamp)
  return timestamp_;
}
inline void Log::set_allocated_timestamp(::Timestamp* timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete timestamp_;
  }
  if (timestamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:Log.timestamp)
}

// .Log.EcuId ecuid = 4;
inline void Log::clear_ecuid() {
  ecuid_ = 0;
}
inline ::Log_EcuId Log::ecuid() const {
  // @@protoc_insertion_point(field_get:Log.ecuid)
  return static_cast< ::Log_EcuId >(ecuid_);
}
inline void Log::set_ecuid(::Log_EcuId value) {
  
  ecuid_ = value;
  // @@protoc_insertion_point(field_set:Log.ecuid)
}

// .Log.ApId apid = 5;
inline void Log::clear_apid() {
  apid_ = 0;
}
inline ::Log_ApId Log::apid() const {
  // @@protoc_insertion_point(field_get:Log.apid)
  return static_cast< ::Log_ApId >(apid_);
}
inline void Log::set_apid(::Log_ApId value) {
  
  apid_ = value;
  // @@protoc_insertion_point(field_set:Log.apid)
}

// .Log.CtId ctid = 6;
inline void Log::clear_ctid() {
  ctid_ = 0;
}
inline ::Log_CtId Log::ctid() const {
  // @@protoc_insertion_point(field_get:Log.ctid)
  return static_cast< ::Log_CtId >(ctid_);
}
inline void Log::set_ctid(::Log_CtId value) {
  
  ctid_ = value;
  // @@protoc_insertion_point(field_set:Log.ctid)
}

// .Log.Type type = 7;
inline void Log::clear_type() {
  type_ = 0;
}
inline ::Log_Type Log::type() const {
  // @@protoc_insertion_point(field_get:Log.type)
  return static_cast< ::Log_Type >(type_);
}
inline void Log::set_type(::Log_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Log.type)
}

// string payload = 8;
inline void Log::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Log::payload() const {
  // @@protoc_insertion_point(field_get:Log.payload)
  return payload_.GetNoArena();
}
inline void Log::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Log.payload)
}
#if LANG_CXX11
inline void Log::set_payload(::std::string&& value) {
  
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Log.payload)
}
#endif
inline void Log::set_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Log.payload)
}
inline void Log::set_payload(const char* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Log.payload)
}
inline ::std::string* Log::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:Log.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Log::release_payload() {
  // @@protoc_insertion_point(field_release:Log.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Log::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:Log.payload)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Log_EcuId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Log_EcuId>() {
  return ::Log_EcuId_descriptor();
}
template <> struct is_proto_enum< ::Log_ApId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Log_ApId>() {
  return ::Log_ApId_descriptor();
}
template <> struct is_proto_enum< ::Log_CtId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Log_CtId>() {
  return ::Log_CtId_descriptor();
}
template <> struct is_proto_enum< ::Log_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Log_Type>() {
  return ::Log_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_logger_5fproto_2eproto
